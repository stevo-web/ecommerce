scalar Upload

type Query {
    allCounties: [County!]!
    county(code: Int!): County
    allProducts: [Product!]!
    product(ProdId: Int): Product
    allCategories: [Category!]!
    allSubCategories(id: Int): [SubCategory!]!
    cart: Cart!
}

type Mutation {
    addToCart(prodId: Int quantity: Int): addPayload!
    removeItem(prodId: Int): removeItemPayload
    update(prodId: Int quantity: Int): updateCartPayload
    register(
        firstname: String!
        lastname: String!
        email: String!
        location: String!
        phone: String!
        image: Upload
        password: String!
    ):registerPayload
}

type Cart{
    count: Int
    summary: Float
    items: [Item]
}

type Item {
    id: Int
    quantity: Int
    unit: Float
    total: Float
    product: Product
}

type Category {
    id: Int
    name: String!
    sub_category: [SubCategory!]!
}

type SubCategory {
    id: Int
    name: String
    products: [Product]
}

type Product {
    id: Int
    name: String
    price: Float
    discount: Float
    description: String
    category: String
    image: String

}

type County {
    name: String
    code: Int
    capital: String
    sub_counties: [String]
}

type addPayload {
    success: Boolean
}

type removeItemPayload {
    success: Boolean
}

type updateCartPayload {
    success: Boolean
}
type registerPayload {
    success: Boolean
}